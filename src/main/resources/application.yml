#服务端口与超时
server:
  port: 8080
  session-timeout: 1200
  tomcat:
    accesslog:
      # 打开Tomcat访问日志
      enabled: true
      # 访问日志所在目录
      directory: logs
    uri-encoding: utf-8
    compression: off
    # 允许HTTP请求缓存到请求队列的最大个数，默认不限制
    #accept-count:
    # 最大连接数，默认不限制，如果一旦连接数到达，剩下的连接将会保存到请求缓存队列李，也就是accept-count指定队列
    #max-connections:
    # 最大工作线程数
    #max-threads:
    # HTTP POST最大长度，默认不限制
    #max-http-post-size:

#logback日志(默认情况下，INFO级别以上的信息才会打印到控制台，可以自己设定日志输出级别)
logging:
  config: classpath:logback.xml

#actuator端口
management:
  server:
    port: 9001
  security:
    enabled: false
  endpoints:
    web:
      #修改访问路径  2.0之前默认是/   2.0默认是 /actuator  可以通过这个属性值修改
      base-path: /monitor
      exposure:
        #开放所有页面节点  默认只开启了health、info两个节点(yml中*是特殊字符，需要引号)
        include: "*"
    health:
      #显示健康具体信息  默认不会显示详细信息
      show-details: always

# 设置banner信息(现在字符集默认UTF-8不需要设置、location、image现在都是deprecated)

# spring servlet信息、数据源配置
spring:
  servlet:
    # 配置servlet上传文件
    multipart:
      enabled: true
      file-size-threshold: 0
      location:
      max-file-size: 25MB
      max-request-size: 20MB
      resolve-lazily: false
  kafka:
    # 指定kafka server的地址，集群配多个，中间，逗号隔开
    bootstrap-servers: 127.0.0.1:9092
    producer:
      #=============== provider  =======================
      # 写入失败时，重试次数。当leader节点失效，一个repli节点会替代成为leader节点，此时可能出现写入失败，
      # 当retris为0时，produce不会重复。retirs重发，此时repli节点完全成为leader节点，不会产生消息丢失。
      retries: 0
      # 每次批量发送消息的数量,produce积累到一定数据，一次发送
      batch-size: 16384
      # produce积累数据一次发送，缓存大小达到buffer.memory就发送数据
      buffer-memory: 33554432
      #procedure要求leader在考虑完成请求之前收到的确认数，用于控制发送记录在服务端的持久化，其值可以为如下：
      #acks = 0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。
      #acks = 1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
      #acks = all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。
      #可以设置的值为：all, -1, 0, 1
      acks: 1
      # 指定消息key和消息体的编解码方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      #=============== consumer  =======================
      # 指定默认消费者group id --> 由于在kafka中，同一组中的consumer不会读取到同一个消息，依靠groud.id设置组名
      group-id: testGroup
      # smallest和largest才有效，如果smallest重新0开始读取，如果是largest从logfile的offset读取。一般情况下我们都是设置smallest
      auto-offset-reset: smallest
      # enable.auto.commit:true --> 设置自动提交offset
      enable-auto-commit: true
      #如果'enable.auto.commit'为true，则消费者偏移自动提交给Kafka的频率（以毫秒为单位），默认值为5000。
      auto-commit-interval: 100
      # 指定消息key和消息体的编解码方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

# 自定义某些配置属性(如RPC服务或netty绑定端口，给`@ConfigurationProperties`用)
diy:
  ip: 192.168.0.106
  port: 10520

